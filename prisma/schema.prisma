// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  key   String @id
  value String
}

model School {
  id         String  @id @default(uuid())
  schoolName String  @default("PrepSOM School")
  Grade      Grade[]
}

model Grade {
  id           String         @id @default(uuid())
  grade        Int
  students     User[]         @relation("StudentGrade")
  TeacherGrade TeacherGrade[]
  Subjects     Subject[]
  school       School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId     String
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String?
  password          String
  role              Role                @default(STUDENT)
  createdAt         DateTime            @default(now())
  avatar            Avatar              @default(MALE)
  schoolName        String?
  phoneNumber       String?
  // Only for students
  grade             Grade?              @relation("StudentGrade", fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId           String?
  // Only for teachers
  teacherGrades     TeacherGrade[]
  QuestionResponses QuestionResponse[]
  UserLevelComplete UserLevelComplete[]
  lastLogin         DateTime?
}

// Junction table for Teacher-Grade many-to-many relationship
model TeacherGrade {
  id        String   @id @default(uuid())
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  grade     Grade    @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId   String
  createdAt DateTime @default(now())

  @@unique([teacherId, gradeId])
}

model Subject {
  id          String  @id @default(uuid())
  subjectName String
  grade       Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId     String
  Levels      Level[]
}

model Level {
  id                String              @id @default(uuid())
  levelName         String
  levelDescription  String?
  position          Int                 @default(0)
  subject           Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId         String
  Questions         Question[]
  UserLevelComplete UserLevelComplete[]
  passingQuestions  Int                 @default(0)
}

model Question {
  id            String       @id @default(uuid())
  questionType  QuestionType @default(MCQ)
  questionTitle String
  questionHint  String?
  difficulty    Difficulty   @default(EASY)
  level         Level        @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId       String
  explanation   String       @default("")

  MCQAnswers       Answer[]
  // New relations for other question types
  BlankSegments    BlankSegment[] // ["" , "is the process that plants get sunlight" ," " , " asdlaksd "]
  BlankAnswers     BlankAnswer[]
  MatchingPairs    MatchingPair[]
  QuestionResponse QuestionResponse[]
  ready            Boolean            @default(false)
}

model Answer {
  id               String             @id @default(uuid())
  value            String
  question         Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  isCorrect        Boolean            @default(false)
  QuestionResponse QuestionResponse[]
}

model BlankSegment {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  isBlank    Boolean  @default(false)
  order      Int
  blankHint  String?
}

// New model for fill-in-blank answers
model BlankAnswer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  value      String
  blankIndex Int // Corresponds to the blank's position in the question
  isCorrect  Boolean  @default(true)
  // Can store alternative answers here too
}

// New model for matching pairs
model MatchingPair {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  leftItem   String
  rightItem  String
  order      Int // For maintaining pair order in display
}

model QuestionResponse {
  id             String   @id @default(uuid())
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  responder      User     @relation(fields: [responderId], references: [id], onDelete: Cascade)
  responderId    String
  // Make these optional since they're only for MCQ
  chosenAnswer   Answer?  @relation(fields: [chosenAnswerId], references: [id], onDelete: Cascade)
  chosenAnswerId String?
  // New field for storing other types of responses
  responseData   Json? // Stores fill-in-blank answers or matching pairs
  pointsEarned   Int
  isCorrect      Boolean
  responseTime   Int
  createdAt      DateTime @default(now())

  @@unique([responderId, questionId])
}

model UserLevelComplete {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  level                Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId              String
  totalPoints          Int
  noOfCorrectQuestions Int
  strengths            String[]
  weaknesses           String[]
  recommendations      String[]

  @@unique([userId, levelId])
}

enum QuestionType {
  MCQ
  FILL_IN_BLANK
  MATCHING
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Avatar {
  MALE
  FEMALE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
