// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  key   String @id
  value String
}

model Grade {
  id           String         @id @default(uuid())
  grade        Int
  students     User[]         @relation("StudentGrade")
  TeacherGrade TeacherGrade[]
  Subjects     Subject[]
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String?
  password          String
  role              Role                @default(STUDENT)
  createdAt         DateTime            @default(now())
  avatar            Avatar              @default(MALE)
  // Only for students
  grade             Grade?              @relation("StudentGrade", fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId           String?
  // Only for teachers
  teacherGrades     TeacherGrade[]
  QuestionResponses QuestionResponse[]
  UserLevelComplete UserLevelComplete[]
  lastLogin         DateTime?
}

// Junction table for Teacher-Grade many-to-many relationship
model TeacherGrade {
  id        String   @id @default(uuid())
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  grade     Grade    @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId   String
  createdAt DateTime @default(now())

  @@unique([teacherId, gradeId])
}

model Subject {
  id          String  @id @default(uuid())
  subjectName String
  grade       Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId     String
  Levels      Level[]
}

model Level {
  id                String              @id @default(uuid())
  levelName         String
  levelDescription  String?
  position          Int                 @default(0)
  subject           Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId         String
  Questions         Question[]
  UserLevelComplete UserLevelComplete[]
  passingQuestions  Int                 @default(0)
}

model Question {
  id               String             @id @default(uuid())
  questionTitle    String
  questionHint     String?
  difficulty       Difficulty         @default(EASY)
  level            Level              @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId          String
  explanation      String             @default("")
  Answers          Answer[]
  QuestionResponse QuestionResponse[]
  ready            Boolean            @default(false)
}

model Answer {
  id               String             @id @default(uuid())
  value            String
  question         Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  isCorrect        Boolean            @default(false)
  QuestionResponse QuestionResponse[]
}

model QuestionResponse {
  id             String   @id @default(uuid())
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  responder      User     @relation(fields: [responderId], references: [id], onDelete: Cascade)
  responderId    String
  chosenAnswer   Answer   @relation(fields: [chosenAnswerId], references: [id], onDelete: Cascade)
  chosenAnswerId String
  pointsEarned   Int
  isCorrect      Boolean
  responseTime   Int
  createdAt      DateTime @default(now())

  @@unique([responderId, questionId])
}

model UserLevelComplete {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  level                Level    @relation(fields: [levelId], references: [id])
  levelId              String
  totalPoints          Int
  noOfCorrectQuestions Int
  strengths            String[]
  weaknesses           String[]
  recommendations      String[]

  @@unique([userId, levelId])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Avatar {
  MALE
  FEMALE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
